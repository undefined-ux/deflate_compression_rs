pub struct Crc32 {}

impl Crc32 {
    const POLY: u32 = 0xdebb20e3;
    const CRC32_TABLE: [u32; 256] = [
        0x0, 0x14fb4cd0, 0x29f699a0, 0x3d0dd570, 0x53ed3340, 0x47167f90, 0x7a1baae0, 0x6ee0e630,
        0xa7da6680, 0xb3212a50, 0x8e2cff20, 0x9ad7b3f0, 0xf43755c0, 0xe0cc1910, 0xddc1cc60,
        0xc93a80b0, 0xf2c28cc7, 0xe639c017, 0xdb341567, 0xcfcf59b7, 0xa12fbf87, 0xb5d4f357,
        0x88d92627, 0x9c226af7, 0x5518ea47, 0x41e3a697, 0x7cee73e7, 0x68153f37, 0x6f5d907,
        0x120e95d7, 0x2f0340a7, 0x3bf80c77, 0x58f35849, 0x4c081499, 0x7105c1e9, 0x65fe8d39,
        0xb1e6b09, 0x1fe527d9, 0x22e8f2a9, 0x3613be79, 0xff293ec9, 0xebd27219, 0xd6dfa769,
        0xc224ebb9, 0xacc40d89, 0xb83f4159, 0x85329429, 0x91c9d8f9, 0xaa31d48e, 0xbeca985e,
        0x83c74d2e, 0x973c01fe, 0xf9dce7ce, 0xed27ab1e, 0xd02a7e6e, 0xc4d132be, 0xdebb20e,
        0x1910fede, 0x241d2bae, 0x30e6677e, 0x5e06814e, 0x4afdcd9e, 0x77f018ee, 0x630b543e,
        0xb1e6b092, 0xa51dfc42, 0x98102932, 0x8ceb65e2, 0xe20b83d2, 0xf6f0cf02, 0xcbfd1a72,
        0xdf0656a2, 0x163cd612, 0x2c79ac2, 0x3fca4fb2, 0x2b310362, 0x45d1e552, 0x512aa982,
        0x6c277cf2, 0x78dc3022, 0x43243c55, 0x57df7085, 0x6ad2a5f5, 0x7e29e925, 0x10c90f15,
        0x43243c5, 0x393f96b5, 0x2dc4da65, 0xe4fe5ad5, 0xf0051605, 0xcd08c375, 0xd9f38fa5,
        0xb7136995, 0xa3e82545, 0x9ee5f035, 0x8a1ebce5, 0xe915e8db, 0xfdeea40b, 0xc0e3717b,
        0xd4183dab, 0xbaf8db9b, 0xae03974b, 0x930e423b, 0x87f50eeb, 0x4ecf8e5b, 0x5a34c28b,
        0x673917fb, 0x73c25b2b, 0x1d22bd1b, 0x9d9f1cb, 0x34d424bb, 0x202f686b, 0x1bd7641c,
        0xf2c28cc, 0x3221fdbc, 0x26dab16c, 0x483a575c, 0x5cc11b8c, 0x61cccefc, 0x7537822c,
        0xbc0d029c, 0xa8f64e4c, 0x95fb9b3c, 0x8100d7ec, 0xefe031dc, 0xfb1b7d0c, 0xc616a87c,
        0xd2ede4ac, 0xdebb20e3, 0xca406c33, 0xf74db943, 0xe3b6f593, 0x8d5613a3, 0x99ad5f73,
        0xa4a08a03, 0xb05bc6d3, 0x79614663, 0x6d9a0ab3, 0x5097dfc3, 0x446c9313, 0x2a8c7523,
        0x3e7739f3, 0x37aec83, 0x1781a053, 0x2c79ac24, 0x3882e0f4, 0x58f3584, 0x11747954,
        0x7f949f64, 0x6b6fd3b4, 0x566206c4, 0x42994a14, 0x8ba3caa4, 0x9f588674, 0xa2555304,
        0xb6ae1fd4, 0xd84ef9e4, 0xccb5b534, 0xf1b86044, 0xe5432c94, 0x864878aa, 0x92b3347a,
        0xafbee10a, 0xbb45adda, 0xd5a54bea, 0xc15e073a, 0xfc53d24a, 0xe8a89e9a, 0x21921e2a,
        0x356952fa, 0x864878a, 0x1c9fcb5a, 0x727f2d6a, 0x668461ba, 0x5b89b4ca, 0x4f72f81a,
        0x748af46d, 0x6071b8bd, 0x5d7c6dcd, 0x4987211d, 0x2767c72d, 0x339c8bfd, 0xe915e8d,
        0x1a6a125d, 0xd35092ed, 0xc7abde3d, 0xfaa60b4d, 0xee5d479d, 0x80bda1ad, 0x9446ed7d,
        0xa94b380d, 0xbdb074dd, 0x6f5d9071, 0x7ba6dca1, 0x46ab09d1, 0x52504501, 0x3cb0a331,
        0x284befe1, 0x15463a91, 0x1bd7641, 0xc887f6f1, 0xdc7cba21, 0xe1716f51, 0xf58a2381,
        0x9b6ac5b1, 0x8f918961, 0xb29c5c11, 0xa66710c1, 0x9d9f1cb6, 0x89645066, 0xb4698516,
        0xa092c9c6, 0xce722ff6, 0xda896326, 0xe784b656, 0xf37ffa86, 0x3a457a36, 0x2ebe36e6,
        0x13b3e396, 0x748af46, 0x69a84976, 0x7d5305a6, 0x405ed0d6, 0x54a59c06, 0x37aec838,
        0x235584e8, 0x1e585198, 0xaa31d48, 0x6443fb78, 0x70b8b7a8, 0x4db562d8, 0x594e2e08,
        0x9074aeb8, 0x848fe268, 0xb9823718, 0xad797bc8, 0xc3999df8, 0xd762d128, 0xea6f0458,
        0xfe944888, 0xc56c44ff, 0xd197082f, 0xec9add5f, 0xf861918f, 0x968177bf, 0x827a3b6f,
        0xbf77ee1f, 0xab8ca2cf, 0x62b6227f, 0x764d6eaf, 0x4b40bbdf, 0x5fbbf70f, 0x315b113f,
        0x25a05def, 0x18ad889f, 0xc56c44f,
    ];
    pub fn calculate(data: &[u8]) -> u32 {
        let mut crc_value: u32 = 0xFFFFFFFF;
        for byte in data {
            let index: usize = ((crc_value ^ (*byte as u32)) & 0xff).try_into().unwrap();
            crc_value = (crc_value >> 8) ^ Self::CRC32_TABLE[index];
        }
        (((crc_value ^ 0xFFFFFFFF) as u64 | 0x0000000100000000 ) & 0xFFFFFFFF) as u32
    }
}
